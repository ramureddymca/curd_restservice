<?xml version="1.0" encoding="UTF-8" ?>
<testsuite tests="21" failures="1" name="com.hackerrank.github.TestSuite" time="0.221" errors="0" skipped="0">
  <properties>
    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
    <property name="java.vm.version" value="11.0.5+10-LTS"/>
    <property name="sun.boot.library.path" value="C:\SOFTWARES\JAVA\jdk-11.0.5\bin"/>
    <property name="maven.multiModuleProjectDirectory" value="C:\JAVA_TEST\UBS\githubapi"/>
    <property name="java.vm.vendor" value="Oracle Corporation"/>
    <property name="java.vendor.url" value="http://java.oracle.com/"/>
    <property name="guice.disable.misplaced.annotation.check" value="true"/>
    <property name="path.separator" value=";"/>
    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
    <property name="sun.os.patch.level" value=""/>
    <property name="user.script" value=""/>
    <property name="user.country" value="US"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="user.dir" value="C:\JAVA_TEST\UBS\githubapi"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="java.runtime.version" value="11.0.5+10-LTS"/>
    <property name="java.awt.graphicsenv" value="sun.awt.Win32GraphicsEnvironment"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.io.tmpdir" value="C:\Users\verni\AppData\Local\Temp\"/>
    <property name="line.separator" value="
"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="user.variant" value=""/>
    <property name="os.name" value="Windows 10"/>
    <property name="classworlds.conf" value="C:\Users\verni\Documents\workspace-spring-tool-suite-4-4.4.2.RELEASE\.metadata\.plugins\org.eclipse.m2e.launching\launches\m2conf12351022002027271164.tmp"/>
    <property name="jansi.force" value="true"/>
    <property name="sun.jnu.encoding" value="Cp1252"/>
    <property name="java.library.path" value="C:\SOFTWARES\JAVA\jdk-11.0.5\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:/SOFTWARES/JAVA/jdk-11.0.5/bin/server;C:/SOFTWARES/JAVA/jdk-11.0.5/bin;&quot;C:\WINDOWS\system32;C:\SOFTWARES\JAVA\jdk-11.0.5\bin&quot;;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\SOFTWARES\JAVA\jdk-11.0.5\bin;C:\Program Files\Git\cmd;C:\SOFTWARES\JAVA\apache-maven-3.6.3\bin;C:\Users\verni\AppData\Local\Microsoft\WindowsApps;;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2019.3.3\bin;;C:\SOFTWARES\JAVA\sts-4.4.2.RELEASE;;."/>
    <property name="jansi.passthrough" value="true"/>
    <property name="jdk.debug" value="release"/>
    <property name="java.class.version" value="55.0"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="os.version" value="10.0"/>
    <property name="user.home" value="C:\Users\verni"/>
    <property name="user.timezone" value="Asia/Singapore"/>
    <property name="java.awt.printerjob" value="sun.awt.windows.WPrinterJob"/>
    <property name="file.encoding" value="Cp1252"/>
    <property name="java.specification.version" value="11"/>
    <property name="user.name" value="verni"/>
    <property name="java.class.path" value="C:\SOFTWARES\JAVA\sts-4.4.2.RELEASE\plugins\org.eclipse.m2e.maven.runtime_1.13.0.20190716-1623\jars\plexus-classworlds-2.6.0.jar"/>
    <property name="java.vm.specification.version" value="11"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="sun.java.command" value="org.codehaus.plexus.classworlds.launcher.Launcher -B install -Dstyle.color=always"/>
    <property name="java.home" value="C:\SOFTWARES\JAVA\jdk-11.0.5"/>
    <property name="user.language" value="en"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="awt.toolkit" value="sun.awt.windows.WToolkit"/>
    <property name="java.vm.info" value="mixed mode"/>
    <property name="java.version" value="11.0.5"/>
    <property name="java.vendor" value="Oracle Corporation"/>
    <property name="maven.home" value="C:\JAVA_TEST\UBS\githubapi\EMBEDDED"/>
    <property name="style.color" value="always"/>
    <property name="file.separator" value="\"/>
    <property name="java.version.date" value="2019-10-15"/>
    <property name="java.vendor.url.bug" value="http://bugreport.java.com/bugreport/"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="java.vendor.version" value="18.9"/>
    <property name="sun.desktop" value="windows"/>
    <property name="sun.cpu.isalist" value="amd64"/>
  </properties>
  <testcase classname="com.hackerrank.github.requests.EventsControllerTest" name="createEvent" time="0.037"/>
  <testcase classname="com.hackerrank.github.requests.EventsControllerTest" name="createEventWithExistingId" time="0.01"/>
  <testcase classname="com.hackerrank.github.requests.EventsControllerTest" name="findEventById" time="0.012"/>
  <testcase classname="com.hackerrank.github.requests.EventsControllerTest" name="findEventByNonExistingId" time="0.007"/>
  <testcase classname="com.hackerrank.github.requests.EventsControllerTest" name="findAllEventsByRepoId" time="0.011"/>
  <testcase classname="com.hackerrank.github.requests.EventsControllerTest" name="findAllEventsByNonExistingRepoId" time="0.007"/>
  <testcase classname="com.hackerrank.github.requests.EventsControllerTest" name="findAllEventsByActorId" time="0.011"/>
  <testcase classname="com.hackerrank.github.requests.EventsControllerTest" name="findAllEventsByNonExistingActorId" time="0.005"/>
  <testcase classname="com.hackerrank.github.requests.EventsControllerTest" name="findAllEventsByRepoIdAndActorId" time="0.026">
    <failure message="Status expected:&lt;200&gt; but was:&lt;404&gt;" type="java.lang.AssertionError">java.lang.AssertionError: Status expected:&lt;200&gt; but was:&lt;404&gt;
	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:55)
	at org.springframework.test.util.AssertionErrors.assertEquals(AssertionErrors.java:82)
	at org.springframework.test.web.servlet.result.StatusResultMatchers.lambda$matcher$9(StatusResultMatchers.java:619)
	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:195)
	at com.hackerrank.github.requests.EventsControllerTest.findAllEventsByRepoIdAndActorId(EventsControllerTest.java:474)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.RunPrepareTestInstanceCallbacks.evaluate(RunPrepareTestInstanceCallbacks.java:64)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.springframework.test.context.junit4.statements.SpringFailOnTimeout.evaluate(SpringFailOnTimeout.java:87)
	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103)
	at org.springframework.test.context.junit4.rules.SpringClassRule$TestContextManagerCacheEvictor.evaluate(SpringClassRule.java:190)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:252)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:141)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:112)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
</failure>
    <system-out>
MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /events
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {&quot;id&quot;: 1, &quot;type&quot;: &quot;PushEvent&quot;, &quot;actor&quot;: {&quot;id&quot;: 3, &quot;login&quot;: &quot;christinelewis&quot;, &quot;avatar_url&quot;: &quot;https://avatars.com/christinelewis&quot;}, &quot;repo&quot;: {&quot;id&quot;: 1, &quot;name&quot;: &quot;kelly/esse&quot;, &quot;url&quot;: &quot;https://github.com/kelly/esse&quot;}, &quot;created_at&quot;: &quot;2018-12-28 01:29:02&quot;}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.github.controller.EventsController
           Method = public org.springframework.http.ResponseEntity&lt;java.lang.Long&gt; com.hackerrank.github.controller.EventsController.addNewEvent(com.hackerrank.github.model.Event,javax.servlet.http.HttpServletRequest)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = 1
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /events
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {&quot;id&quot;: 2, &quot;type&quot;: &quot;PushEvent&quot;, &quot;actor&quot;: {&quot;id&quot;: 2, &quot;login&quot;: &quot;samantha41&quot;, &quot;avatar_url&quot;: &quot;https://avatars.com/samantha41&quot;}, &quot;repo&quot;: {&quot;id&quot;: 2, &quot;name&quot;: &quot;padilla/magnam&quot;, &quot;url&quot;: &quot;https://github.com/padilla/magnam&quot;}, &quot;created_at&quot;: &quot;2018-12-29 20:31:36&quot;}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.github.controller.EventsController
           Method = public org.springframework.http.ResponseEntity&lt;java.lang.Long&gt; com.hackerrank.github.controller.EventsController.addNewEvent(com.hackerrank.github.model.Event,javax.servlet.http.HttpServletRequest)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = 2
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /events
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {&quot;id&quot;: 3, &quot;type&quot;: &quot;PushEvent&quot;, &quot;actor&quot;: {&quot;id&quot;: 1, &quot;login&quot;: &quot;michael14&quot;, &quot;avatar_url&quot;: &quot;https://avatars.com/michael14&quot;}, &quot;repo&quot;: {&quot;id&quot;: 1, &quot;name&quot;: &quot;kelly/esse&quot;, &quot;url&quot;: &quot;https://github.com/kelly/esse&quot;}, &quot;created_at&quot;: &quot;2018-12-31 00:02:09&quot;}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.github.controller.EventsController
           Method = public org.springframework.http.ResponseEntity&lt;java.lang.Long&gt; com.hackerrank.github.controller.EventsController.addNewEvent(com.hackerrank.github.model.Event,javax.servlet.http.HttpServletRequest)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = 3
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /events
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {&quot;id&quot;: 4, &quot;type&quot;: &quot;PushEvent&quot;, &quot;actor&quot;: {&quot;id&quot;: 1, &quot;login&quot;: &quot;michael14&quot;, &quot;avatar_url&quot;: &quot;https://avatars.com/michael14&quot;}, &quot;repo&quot;: {&quot;id&quot;: 2, &quot;name&quot;: &quot;padilla/magnam&quot;, &quot;url&quot;: &quot;https://github.com/padilla/magnam&quot;}, &quot;created_at&quot;: &quot;2018-12-31 16:18:49&quot;}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.github.controller.EventsController
           Method = public org.springframework.http.ResponseEntity&lt;java.lang.Long&gt; com.hackerrank.github.controller.EventsController.addNewEvent(com.hackerrank.github.model.Event,javax.servlet.http.HttpServletRequest)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = 4
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /events
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {&quot;id&quot;: 1, &quot;type&quot;: &quot;PushEvent&quot;, &quot;actor&quot;: {&quot;id&quot;: 3, &quot;login&quot;: &quot;christinelewis&quot;, &quot;avatar_url&quot;: &quot;https://avatars.com/christinelewis&quot;}, &quot;repo&quot;: {&quot;id&quot;: 1, &quot;name&quot;: &quot;kelly/esse&quot;, &quot;url&quot;: &quot;https://github.com/kelly/esse&quot;}, &quot;created_at&quot;: &quot;2018-12-28 01:29:02&quot;}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.github.controller.EventsController
           Method = public org.springframework.http.ResponseEntity&lt;java.lang.Long&gt; com.hackerrank.github.controller.EventsController.addNewEvent(com.hackerrank.github.model.Event,javax.servlet.http.HttpServletRequest)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /events/1
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.hackerrank.github.controller.EventsController
           Method = public org.springframework.http.ResponseEntity&lt;com.hackerrank.github.model.Event&gt; com.hackerrank.github.controller.EventsController.getEventByEventId(long,javax.servlet.http.HttpServletRequest)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {&quot;id&quot;:1,&quot;type&quot;:&quot;PushEvent&quot;,&quot;actor&quot;:{&quot;id&quot;:3,&quot;login&quot;:&quot;christinelewis&quot;,&quot;avatar_url&quot;:&quot;https://avatars.com/christinelewis&quot;},&quot;repo&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;kelly/esse&quot;,&quot;url&quot;:&quot;https://github.com/kelly/esse&quot;},&quot;created_at&quot;:&quot;2018-12-28 01:29:02&quot;}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /events/5
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.hackerrank.github.controller.EventsController
           Method = public org.springframework.http.ResponseEntity&lt;com.hackerrank.github.model.Event&gt; com.hackerrank.github.controller.EventsController.getEventByEventId(long,javax.servlet.http.HttpServletRequest)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /events/repos/1
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.hackerrank.github.controller.EventsController
           Method = public org.springframework.http.ResponseEntity&lt;java.util.List&lt;com.hackerrank.github.model.Event&gt;&gt; com.hackerrank.github.controller.EventsController.getAllEventsByReposId(long,javax.servlet.http.HttpServletRequest)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = [{&quot;id&quot;:1,&quot;type&quot;:&quot;PushEvent&quot;,&quot;actor&quot;:{&quot;id&quot;:3,&quot;login&quot;:&quot;christinelewis&quot;,&quot;avatar_url&quot;:&quot;https://avatars.com/christinelewis&quot;},&quot;repo&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;kelly/esse&quot;,&quot;url&quot;:&quot;https://github.com/kelly/esse&quot;},&quot;created_at&quot;:&quot;2018-12-28 01:29:02&quot;},{&quot;id&quot;:3,&quot;type&quot;:&quot;PushEvent&quot;,&quot;actor&quot;:{&quot;id&quot;:1,&quot;login&quot;:&quot;michael14&quot;,&quot;avatar_url&quot;:&quot;https://avatars.com/michael14&quot;},&quot;repo&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;kelly/esse&quot;,&quot;url&quot;:&quot;https://github.com/kelly/esse&quot;},&quot;created_at&quot;:&quot;2018-12-31 00:02:09&quot;}]
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /events/repos/3
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.hackerrank.github.controller.EventsController
           Method = public org.springframework.http.ResponseEntity&lt;java.util.List&lt;com.hackerrank.github.model.Event&gt;&gt; com.hackerrank.github.controller.EventsController.getAllEventsByReposId(long,javax.servlet.http.HttpServletRequest)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = []
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /events/actors/1
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.hackerrank.github.controller.EventsController
           Method = public org.springframework.http.ResponseEntity&lt;java.util.List&lt;com.hackerrank.github.model.Event&gt;&gt; com.hackerrank.github.controller.EventsController.getAllEventsByActorId(long,javax.servlet.http.HttpServletRequest)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = [{&quot;id&quot;:3,&quot;type&quot;:&quot;PushEvent&quot;,&quot;actor&quot;:{&quot;id&quot;:1,&quot;login&quot;:&quot;michael14&quot;,&quot;avatar_url&quot;:&quot;https://avatars.com/michael14&quot;},&quot;repo&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;kelly/esse&quot;,&quot;url&quot;:&quot;https://github.com/kelly/esse&quot;},&quot;created_at&quot;:&quot;2018-12-31 00:02:09&quot;},{&quot;id&quot;:4,&quot;type&quot;:&quot;PushEvent&quot;,&quot;actor&quot;:{&quot;id&quot;:1,&quot;login&quot;:&quot;michael14&quot;,&quot;avatar_url&quot;:&quot;https://avatars.com/michael14&quot;},&quot;repo&quot;:{&quot;id&quot;:2,&quot;name&quot;:&quot;padilla/magnam&quot;,&quot;url&quot;:&quot;https://github.com/padilla/magnam&quot;},&quot;created_at&quot;:&quot;2018-12-31 16:18:49&quot;}]
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /events/actors/4
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.hackerrank.github.controller.EventsController
           Method = public org.springframework.http.ResponseEntity&lt;java.util.List&lt;com.hackerrank.github.model.Event&gt;&gt; com.hackerrank.github.controller.EventsController.getAllEventsByActorId(long,javax.servlet.http.HttpServletRequest)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /events/repos/1/actors/1
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /events/repos/4/actors/5
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /events/repos/4/actors/1
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /events/repos/1/actors/5
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /events
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.hackerrank.github.controller.EventsController
           Method = public org.springframework.http.ResponseEntity&lt;java.util.List&lt;com.hackerrank.github.model.Event&gt;&gt; com.hackerrank.github.controller.EventsController.getAllEvents(javax.servlet.http.HttpServletRequest)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = [{&quot;id&quot;:1,&quot;type&quot;:&quot;PushEvent&quot;,&quot;actor&quot;:{&quot;id&quot;:3,&quot;login&quot;:&quot;christinelewis&quot;,&quot;avatar_url&quot;:&quot;https://avatars.com/christinelewis&quot;},&quot;repo&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;kelly/esse&quot;,&quot;url&quot;:&quot;https://github.com/kelly/esse&quot;},&quot;created_at&quot;:&quot;2018-12-28 01:29:02&quot;},{&quot;id&quot;:2,&quot;type&quot;:&quot;PushEvent&quot;,&quot;actor&quot;:{&quot;id&quot;:2,&quot;login&quot;:&quot;samantha41&quot;,&quot;avatar_url&quot;:&quot;https://avatars.com/samantha41&quot;},&quot;repo&quot;:{&quot;id&quot;:2,&quot;name&quot;:&quot;padilla/magnam&quot;,&quot;url&quot;:&quot;https://github.com/padilla/magnam&quot;},&quot;created_at&quot;:&quot;2018-12-29 20:31:36&quot;},{&quot;id&quot;:3,&quot;type&quot;:&quot;PushEvent&quot;,&quot;actor&quot;:{&quot;id&quot;:1,&quot;login&quot;:&quot;michael14&quot;,&quot;avatar_url&quot;:&quot;https://avatars.com/michael14&quot;},&quot;repo&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;kelly/esse&quot;,&quot;url&quot;:&quot;https://github.com/kelly/esse&quot;},&quot;created_at&quot;:&quot;2018-12-31 00:02:09&quot;},{&quot;id&quot;:4,&quot;type&quot;:&quot;PushEvent&quot;,&quot;actor&quot;:{&quot;id&quot;:1,&quot;login&quot;:&quot;michael14&quot;,&quot;avatar_url&quot;:&quot;https://avatars.com/michael14&quot;},&quot;repo&quot;:{&quot;id&quot;:2,&quot;name&quot;:&quot;padilla/magnam&quot;,&quot;url&quot;:&quot;https://github.com/padilla/magnam&quot;},&quot;created_at&quot;:&quot;2018-12-31 16:18:49&quot;}]
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /events
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.hackerrank.github.controller.EventsController
           Method = public org.springframework.http.ResponseEntity&lt;java.util.List&lt;com.hackerrank.github.model.Event&gt;&gt; com.hackerrank.github.controller.EventsController.getAllEvents(javax.servlet.http.HttpServletRequest)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = [{&quot;id&quot;:1,&quot;type&quot;:&quot;PushEvent&quot;,&quot;actor&quot;:{&quot;id&quot;:3,&quot;login&quot;:&quot;christinelewis&quot;,&quot;avatar_url&quot;:&quot;https://avatars.com/christinelewis&quot;},&quot;repo&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;kelly/esse&quot;,&quot;url&quot;:&quot;https://github.com/kelly/esse&quot;},&quot;created_at&quot;:&quot;2018-12-28 01:29:02&quot;},{&quot;id&quot;:2,&quot;type&quot;:&quot;PushEvent&quot;,&quot;actor&quot;:{&quot;id&quot;:2,&quot;login&quot;:&quot;samantha41&quot;,&quot;avatar_url&quot;:&quot;https://avatars.com/samantha41&quot;},&quot;repo&quot;:{&quot;id&quot;:2,&quot;name&quot;:&quot;padilla/magnam&quot;,&quot;url&quot;:&quot;https://github.com/padilla/magnam&quot;},&quot;created_at&quot;:&quot;2018-12-29 20:31:36&quot;},{&quot;id&quot;:3,&quot;type&quot;:&quot;PushEvent&quot;,&quot;actor&quot;:{&quot;id&quot;:1,&quot;login&quot;:&quot;michael14&quot;,&quot;avatar_url&quot;:&quot;https://avatars.com/michael14&quot;},&quot;repo&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;kelly/esse&quot;,&quot;url&quot;:&quot;https://github.com/kelly/esse&quot;},&quot;created_at&quot;:&quot;2018-12-31 00:02:09&quot;},{&quot;id&quot;:4,&quot;type&quot;:&quot;PushEvent&quot;,&quot;actor&quot;:{&quot;id&quot;:1,&quot;login&quot;:&quot;michael14&quot;,&quot;avatar_url&quot;:&quot;https://avatars.com/michael14&quot;},&quot;repo&quot;:{&quot;id&quot;:2,&quot;name&quot;:&quot;padilla/magnam&quot;,&quot;url&quot;:&quot;https://github.com/padilla/magnam&quot;},&quot;created_at&quot;:&quot;2018-12-31 16:18:49&quot;}]
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /events/repos/1/actors/1
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /events/actors/1
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.hackerrank.github.controller.EventsController
           Method = public org.springframework.http.ResponseEntity&lt;java.util.List&lt;com.hackerrank.github.model.Event&gt;&gt; com.hackerrank.github.controller.EventsController.getAllEventsByActorId(long,javax.servlet.http.HttpServletRequest)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = [{&quot;id&quot;:3,&quot;type&quot;:&quot;PushEvent&quot;,&quot;actor&quot;:{&quot;id&quot;:1,&quot;login&quot;:&quot;michael14&quot;,&quot;avatar_url&quot;:&quot;https://avatars.com/michael14&quot;},&quot;repo&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;kelly/esse&quot;,&quot;url&quot;:&quot;https://github.com/kelly/esse&quot;},&quot;created_at&quot;:&quot;2018-12-31 00:02:09&quot;},{&quot;id&quot;:4,&quot;type&quot;:&quot;PushEvent&quot;,&quot;actor&quot;:{&quot;id&quot;:1,&quot;login&quot;:&quot;michael14&quot;,&quot;avatar_url&quot;:&quot;https://avatars.com/michael14&quot;},&quot;repo&quot;:{&quot;id&quot;:2,&quot;name&quot;:&quot;padilla/magnam&quot;,&quot;url&quot;:&quot;https://github.com/padilla/magnam&quot;},&quot;created_at&quot;:&quot;2018-12-31 16:18:49&quot;}]
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /events/repos/1
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.hackerrank.github.controller.EventsController
           Method = public org.springframework.http.ResponseEntity&lt;java.util.List&lt;com.hackerrank.github.model.Event&gt;&gt; com.hackerrank.github.controller.EventsController.getAllEventsByReposId(long,javax.servlet.http.HttpServletRequest)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = [{&quot;id&quot;:1,&quot;type&quot;:&quot;PushEvent&quot;,&quot;actor&quot;:{&quot;id&quot;:3,&quot;login&quot;:&quot;christinelewis&quot;,&quot;avatar_url&quot;:&quot;https://avatars.com/christinelewis&quot;},&quot;repo&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;kelly/esse&quot;,&quot;url&quot;:&quot;https://github.com/kelly/esse&quot;},&quot;created_at&quot;:&quot;2018-12-28 01:29:02&quot;},{&quot;id&quot;:3,&quot;type&quot;:&quot;PushEvent&quot;,&quot;actor&quot;:{&quot;id&quot;:1,&quot;login&quot;:&quot;michael14&quot;,&quot;avatar_url&quot;:&quot;https://avatars.com/michael14&quot;},&quot;repo&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;kelly/esse&quot;,&quot;url&quot;:&quot;https://github.com/kelly/esse&quot;},&quot;created_at&quot;:&quot;2018-12-31 00:02:09&quot;}]
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /events/1
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.hackerrank.github.controller.EventsController
           Method = public org.springframework.http.ResponseEntity&lt;com.hackerrank.github.model.Event&gt; com.hackerrank.github.controller.EventsController.getEventByEventId(long,javax.servlet.http.HttpServletRequest)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {&quot;id&quot;:1,&quot;type&quot;:&quot;PushEvent&quot;,&quot;actor&quot;:{&quot;id&quot;:3,&quot;login&quot;:&quot;christinelewis&quot;,&quot;avatar_url&quot;:&quot;https://avatars.com/christinelewis&quot;},&quot;repo&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;kelly/esse&quot;,&quot;url&quot;:&quot;https://github.com/kelly/esse&quot;},&quot;created_at&quot;:&quot;2018-12-28 01:29:02&quot;}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /events
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {&quot;id&quot;: 1, &quot;type&quot;: &quot;PushEvent&quot;, &quot;actor&quot;: {&quot;id&quot;: 3, &quot;login&quot;: &quot;christinelewis&quot;, &quot;avatar_url&quot;: &quot;https://avatars.com/christinelewis&quot;}, &quot;repo&quot;: {&quot;id&quot;: 1, &quot;name&quot;: &quot;kelly/esse&quot;, &quot;url&quot;: &quot;https://github.com/kelly/esse&quot;}, &quot;created_at&quot;: &quot;2018-12-28 01:29:02&quot;}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.github.controller.EventsController
           Method = public org.springframework.http.ResponseEntity&lt;java.lang.Long&gt; com.hackerrank.github.controller.EventsController.addNewEvent(com.hackerrank.github.model.Event,javax.servlet.http.HttpServletRequest)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /events
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {&quot;id&quot;: 1, &quot;type&quot;: &quot;PushEvent&quot;, &quot;actor&quot;: {&quot;id&quot;: 3, &quot;login&quot;: &quot;christinelewis&quot;, &quot;avatar_url&quot;: &quot;https://avatars.com/christinelewis&quot;}, &quot;repo&quot;: {&quot;id&quot;: 1, &quot;name&quot;: &quot;kelly/esse&quot;, &quot;url&quot;: &quot;https://github.com/kelly/esse&quot;}, &quot;created_at&quot;: &quot;2018-12-28 01:29:02&quot;}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.github.controller.EventsController
           Method = public org.springframework.http.ResponseEntity&lt;java.lang.Long&gt; com.hackerrank.github.controller.EventsController.addNewEvent(com.hackerrank.github.model.Event,javax.servlet.http.HttpServletRequest)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /erase
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.hackerrank.github.controller.ResourcesController
           Method = public void com.hackerrank.github.controller.ResourcesController.deleteAllEvents(javax.servlet.http.HttpServletRequest)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /events
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {&quot;id&quot;: 1, &quot;type&quot;: &quot;PushEvent&quot;, &quot;actor&quot;: {&quot;id&quot;: 3, &quot;login&quot;: &quot;christinelewis&quot;, &quot;avatar_url&quot;: &quot;https://avatars.com/christinelewis&quot;}, &quot;repo&quot;: {&quot;id&quot;: 1, &quot;name&quot;: &quot;kelly/esse&quot;, &quot;url&quot;: &quot;https://github.com/kelly/esse&quot;}, &quot;created_at&quot;: &quot;2018-12-28 01:29:02&quot;}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.github.controller.EventsController
           Method = public org.springframework.http.ResponseEntity&lt;java.lang.Long&gt; com.hackerrank.github.controller.EventsController.addNewEvent(com.hackerrank.github.model.Event,javax.servlet.http.HttpServletRequest)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = 1
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /events
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {&quot;id&quot;: 2, &quot;type&quot;: &quot;PushEvent&quot;, &quot;actor&quot;: {&quot;id&quot;: 2, &quot;login&quot;: &quot;samantha41&quot;, &quot;avatar_url&quot;: &quot;https://avatars.com/samantha41&quot;}, &quot;repo&quot;: {&quot;id&quot;: 2, &quot;name&quot;: &quot;padilla/magnam&quot;, &quot;url&quot;: &quot;https://github.com/padilla/magnam&quot;}, &quot;created_at&quot;: &quot;2018-12-29 20:31:36&quot;}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.github.controller.EventsController
           Method = public org.springframework.http.ResponseEntity&lt;java.lang.Long&gt; com.hackerrank.github.controller.EventsController.addNewEvent(com.hackerrank.github.model.Event,javax.servlet.http.HttpServletRequest)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = 2
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /events
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {&quot;id&quot;: 3, &quot;type&quot;: &quot;PushEvent&quot;, &quot;actor&quot;: {&quot;id&quot;: 1, &quot;login&quot;: &quot;michael14&quot;, &quot;avatar_url&quot;: &quot;https://avatars.com/michael14&quot;}, &quot;repo&quot;: {&quot;id&quot;: 1, &quot;name&quot;: &quot;kelly/esse&quot;, &quot;url&quot;: &quot;https://github.com/kelly/esse&quot;}, &quot;created_at&quot;: &quot;2018-12-31 00:02:09&quot;}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.github.controller.EventsController
           Method = public org.springframework.http.ResponseEntity&lt;java.lang.Long&gt; com.hackerrank.github.controller.EventsController.addNewEvent(com.hackerrank.github.model.Event,javax.servlet.http.HttpServletRequest)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = 3
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /events
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {&quot;id&quot;: 4, &quot;type&quot;: &quot;PushEvent&quot;, &quot;actor&quot;: {&quot;id&quot;: 1, &quot;login&quot;: &quot;michael14&quot;, &quot;avatar_url&quot;: &quot;https://avatars.com/michael14&quot;}, &quot;repo&quot;: {&quot;id&quot;: 2, &quot;name&quot;: &quot;padilla/magnam&quot;, &quot;url&quot;: &quot;https://github.com/padilla/magnam&quot;}, &quot;created_at&quot;: &quot;2018-12-31 16:18:49&quot;}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.github.controller.EventsController
           Method = public org.springframework.http.ResponseEntity&lt;java.lang.Long&gt; com.hackerrank.github.controller.EventsController.addNewEvent(com.hackerrank.github.model.Event,javax.servlet.http.HttpServletRequest)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 201
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = 4
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /events
       Parameters = {}
          Headers = {Content-Type=[application/json;charset=UTF-8]}
             Body = {&quot;id&quot;: 1, &quot;type&quot;: &quot;PushEvent&quot;, &quot;actor&quot;: {&quot;id&quot;: 3, &quot;login&quot;: &quot;christinelewis&quot;, &quot;avatar_url&quot;: &quot;https://avatars.com/christinelewis&quot;}, &quot;repo&quot;: {&quot;id&quot;: 1, &quot;name&quot;: &quot;kelly/esse&quot;, &quot;url&quot;: &quot;https://github.com/kelly/esse&quot;}, &quot;created_at&quot;: &quot;2018-12-28 01:29:02&quot;}
    Session Attrs = {}

Handler:
             Type = com.hackerrank.github.controller.EventsController
           Method = public org.springframework.http.ResponseEntity&lt;java.lang.Long&gt; com.hackerrank.github.controller.EventsController.addNewEvent(com.hackerrank.github.model.Event,javax.servlet.http.HttpServletRequest)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /events/1
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.hackerrank.github.controller.EventsController
           Method = public org.springframework.http.ResponseEntity&lt;com.hackerrank.github.model.Event&gt; com.hackerrank.github.controller.EventsController.getEventByEventId(long,javax.servlet.http.HttpServletRequest)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = {&quot;id&quot;:1,&quot;type&quot;:&quot;PushEvent&quot;,&quot;actor&quot;:{&quot;id&quot;:3,&quot;login&quot;:&quot;christinelewis&quot;,&quot;avatar_url&quot;:&quot;https://avatars.com/christinelewis&quot;},&quot;repo&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;kelly/esse&quot;,&quot;url&quot;:&quot;https://github.com/kelly/esse&quot;},&quot;created_at&quot;:&quot;2018-12-28 01:29:02&quot;}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /events/5
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.hackerrank.github.controller.EventsController
           Method = public org.springframework.http.ResponseEntity&lt;com.hackerrank.github.model.Event&gt; com.hackerrank.github.controller.EventsController.getEventByEventId(long,javax.servlet.http.HttpServletRequest)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /events/repos/1
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.hackerrank.github.controller.EventsController
           Method = public org.springframework.http.ResponseEntity&lt;java.util.List&lt;com.hackerrank.github.model.Event&gt;&gt; com.hackerrank.github.controller.EventsController.getAllEventsByReposId(long,javax.servlet.http.HttpServletRequest)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = [{&quot;id&quot;:1,&quot;type&quot;:&quot;PushEvent&quot;,&quot;actor&quot;:{&quot;id&quot;:3,&quot;login&quot;:&quot;christinelewis&quot;,&quot;avatar_url&quot;:&quot;https://avatars.com/christinelewis&quot;},&quot;repo&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;kelly/esse&quot;,&quot;url&quot;:&quot;https://github.com/kelly/esse&quot;},&quot;created_at&quot;:&quot;2018-12-28 01:29:02&quot;},{&quot;id&quot;:3,&quot;type&quot;:&quot;PushEvent&quot;,&quot;actor&quot;:{&quot;id&quot;:1,&quot;login&quot;:&quot;michael14&quot;,&quot;avatar_url&quot;:&quot;https://avatars.com/michael14&quot;},&quot;repo&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;kelly/esse&quot;,&quot;url&quot;:&quot;https://github.com/kelly/esse&quot;},&quot;created_at&quot;:&quot;2018-12-31 00:02:09&quot;}]
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /events/repos/3
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.hackerrank.github.controller.EventsController
           Method = public org.springframework.http.ResponseEntity&lt;java.util.List&lt;com.hackerrank.github.model.Event&gt;&gt; com.hackerrank.github.controller.EventsController.getAllEventsByReposId(long,javax.servlet.http.HttpServletRequest)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = []
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /events/actors/1
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.hackerrank.github.controller.EventsController
           Method = public org.springframework.http.ResponseEntity&lt;java.util.List&lt;com.hackerrank.github.model.Event&gt;&gt; com.hackerrank.github.controller.EventsController.getAllEventsByActorId(long,javax.servlet.http.HttpServletRequest)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = {Content-Type=[application/json;charset=UTF-8]}
     Content type = application/json;charset=UTF-8
             Body = [{&quot;id&quot;:3,&quot;type&quot;:&quot;PushEvent&quot;,&quot;actor&quot;:{&quot;id&quot;:1,&quot;login&quot;:&quot;michael14&quot;,&quot;avatar_url&quot;:&quot;https://avatars.com/michael14&quot;},&quot;repo&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;kelly/esse&quot;,&quot;url&quot;:&quot;https://github.com/kelly/esse&quot;},&quot;created_at&quot;:&quot;2018-12-31 00:02:09&quot;},{&quot;id&quot;:4,&quot;type&quot;:&quot;PushEvent&quot;,&quot;actor&quot;:{&quot;id&quot;:1,&quot;login&quot;:&quot;michael14&quot;,&quot;avatar_url&quot;:&quot;https://avatars.com/michael14&quot;},&quot;repo&quot;:{&quot;id&quot;:2,&quot;name&quot;:&quot;padilla/magnam&quot;,&quot;url&quot;:&quot;https://github.com/padilla/magnam&quot;},&quot;created_at&quot;:&quot;2018-12-31 16:18:49&quot;}]
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /events/actors/4
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.hackerrank.github.controller.EventsController
           Method = public org.springframework.http.ResponseEntity&lt;java.util.List&lt;com.hackerrank.github.model.Event&gt;&gt; com.hackerrank.github.controller.EventsController.getAllEventsByActorId(long,javax.servlet.http.HttpServletRequest)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /events/repos/1/actors/1
       Parameters = {}
          Headers = {}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

&amp;#27;[0;31mfindAllEventsByRepoIdAndActorId(com.hackerrank.github.requests.EventsControllerTest)&amp;#27;[0m
&amp;#27;[0;31mjava.lang.AssertionError: Status expected:&lt;200&gt; but was:&lt;404&gt;&amp;#27;[0m
&amp;#27;[0;31m	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:55)&amp;#27;[0m
&amp;#27;[0;31m	at org.springframework.test.util.AssertionErrors.assertEquals(AssertionErrors.java:82)&amp;#27;[0m
&amp;#27;[0;31m	at org.springframework.test.web.servlet.result.StatusResultMatchers.lambda$matcher$9(StatusResultMatchers.java:619)&amp;#27;[0m
&amp;#27;[0;31m	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:195)&amp;#27;[0m
&amp;#27;[0;31m	at com.hackerrank.github.requests.EventsControllerTest.findAllEventsByRepoIdAndActorId(EventsControllerTest.java:474)&amp;#27;[0m
&amp;#27;[0;31m	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&amp;#27;[0m
&amp;#27;[0;31m	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&amp;#27;[0m
&amp;#27;[0;31m	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&amp;#27;[0m
&amp;#27;[0;31m	at java.base/java.lang.reflect.Method.invoke(Method.java:566)&amp;#27;[0m
&amp;#27;[0;31m	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&amp;#27;[0m
&amp;#27;[0;31m	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&amp;#27;[0m
&amp;#27;[0;31m	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&amp;#27;[0m
&amp;#27;[0;31m	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&amp;#27;[0m
&amp;#27;[0;31m	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75)&amp;#27;[0m
&amp;#27;[0;31m	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)&amp;#27;[0m
&amp;#27;[0;31m	at org.springframework.test.context.junit4.statements.RunPrepareTestInstanceCallbacks.evaluate(RunPrepareTestInstanceCallbacks.java:64)&amp;#27;[0m
&amp;#27;[0;31m	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)&amp;#27;[0m
&amp;#27;[0;31m	at org.springframework.test.context.junit4.statements.SpringFailOnTimeout.evaluate(SpringFailOnTimeout.java:87)&amp;#27;[0m
&amp;#27;[0;31m	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103)&amp;#27;[0m
&amp;#27;[0;31m	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)&amp;#27;[0m
&amp;#27;[0;31m	at org.junit.rules.RunRules.evaluate(RunRules.java:20)&amp;#27;[0m
&amp;#27;[0;31m	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)&amp;#27;[0m
&amp;#27;[0;31m	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)&amp;#27;[0m
&amp;#27;[0;31m	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)&amp;#27;[0m
&amp;#27;[0;31m	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)&amp;#27;[0m
&amp;#27;[0;31m	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)&amp;#27;[0m
&amp;#27;[0;31m	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)&amp;#27;[0m
&amp;#27;[0;31m	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)&amp;#27;[0m
&amp;#27;[0;31m	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)&amp;#27;[0m
&amp;#27;[0;31m	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)&amp;#27;[0m
&amp;#27;[0;31m	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)&amp;#27;[0m
&amp;#27;[0;31m	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)&amp;#27;[0m
&amp;#27;[0;31m	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)&amp;#27;[0m
&amp;#27;[0;31m	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103)&amp;#27;[0m
&amp;#27;[0;31m	at org.springframework.test.context.junit4.rules.SpringClassRule$TestContextManagerCacheEvictor.evaluate(SpringClassRule.java:190)&amp;#27;[0m
&amp;#27;[0;31m	at org.junit.rules.RunRules.evaluate(RunRules.java:20)&amp;#27;[0m
&amp;#27;[0;31m	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)&amp;#27;[0m
&amp;#27;[0;31m	at org.junit.runners.Suite.runChild(Suite.java:128)&amp;#27;[0m
&amp;#27;[0;31m	at org.junit.runners.Suite.runChild(Suite.java:27)&amp;#27;[0m
&amp;#27;[0;31m	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)&amp;#27;[0m
&amp;#27;[0;31m	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)&amp;#27;[0m
&amp;#27;[0;31m	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)&amp;#27;[0m
&amp;#27;[0;31m	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)&amp;#27;[0m
&amp;#27;[0;31m	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)&amp;#27;[0m
&amp;#27;[0;31m	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)&amp;#27;[0m
&amp;#27;[0;31m	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)&amp;#27;[0m
&amp;#27;[0;31m	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:252)&amp;#27;[0m
&amp;#27;[0;31m	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:141)&amp;#27;[0m
&amp;#27;[0;31m	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:112)&amp;#27;[0m
&amp;#27;[0;31m	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&amp;#27;[0m
&amp;#27;[0;31m	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&amp;#27;[0m
&amp;#27;[0;31m	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&amp;#27;[0m
&amp;#27;[0;31m	at java.base/java.lang.reflect.Method.invoke(Method.java:566)&amp;#27;[0m
&amp;#27;[0;31m	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)&amp;#27;[0m
&amp;#27;[0;31m	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)&amp;#27;[0m
&amp;#27;[0;31m	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)&amp;#27;[0m
&amp;#27;[0;31m	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)&amp;#27;[0m
&amp;#27;[0;31m	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)&amp;#27;[0m
</system-out>
  </testcase>
  <testcase classname="com.hackerrank.github.requests.EventsControllerTest" name="findAllEventsByNonExistingRepoIdAndNonExistingActorId" time="0.006"/>
  <testcase classname="com.hackerrank.github.requests.EventsControllerTest" name="findAllEventsByNonExistingRepoIdAndActorId" time="0.007"/>
  <testcase classname="com.hackerrank.github.requests.EventsControllerTest" name="findAllEventsByRepoIdAndNonExistingActorId" time="0.008"/>
  <testcase classname="com.hackerrank.github.requests.EventsControllerTest" name="findAllEvents" time="0.013"/>
  <testcase classname="com.hackerrank.github.requests.ResourcesControllerTest" name="eraseAllRecords" time="0.008"/>
  <testcase classname="com.hackerrank.github.requests.NoResourcesEventsControllerTest" name="findAllEvents" time="0.008"/>
  <testcase classname="com.hackerrank.github.requests.NoResourcesEventsControllerTest" name="findAllEventsByNonExistingRepoIdAndNonExistingActorId" time="0.007"/>
  <testcase classname="com.hackerrank.github.requests.NoResourcesEventsControllerTest" name="findAllEventsByNonExistingActorId" time="0.006"/>
  <testcase classname="com.hackerrank.github.requests.NoResourcesEventsControllerTest" name="findAllEventsByNonExistingRepoId" time="0.007"/>
  <testcase classname="com.hackerrank.github.requests.NoResourcesEventsControllerTest" name="findEventByNonExistingId" time="0.006"/>
  <testcase classname="com.hackerrank.github.requests.NoResourcesEventsControllerTest" name="createEvent" time="0.011"/>
  <testcase classname="com.hackerrank.github.requests.NoResourcesEventsControllerTest" name="createEventWithExistingId" time="0.008"/>
</testsuite>